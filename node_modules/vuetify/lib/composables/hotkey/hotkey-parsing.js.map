{"version":3,"file":"hotkey-parsing.js","names":["normalizeKey","consoleWarn","MODIFIERS","splitKeyCombination","combination","isInternal","arguments","length","undefined","startsWithPlusOrUnderscore","startsWith","hasInvalidLeadingSeparator","hasInvalidStructure","includes","endsWith","at","keys","buffer","flushBuffer","push","i","char","nextChar","hasInvalidMinus","some","key","splitKeySequence","str","hasInvalidStart","hasInvalidEnd","result","prevChar","prevPrevChar","precededBySinglePlusOrUnderscore","collapsed","minusCount","part","areAllValid","every","s"],"sources":["../../../src/composables/hotkey/hotkey-parsing.ts"],"sourcesContent":["// Utilities\nimport { normalizeKey } from './key-aliases'\nimport { consoleWarn } from '../../util/console'\n\n// Types\nexport const MODIFIERS = ['ctrl', 'shift', 'alt', 'meta', 'cmd']\n\n/**\n * Splits a single combination string into individual key parts.\n *\n * A combination is a set of keys that must be pressed simultaneously.\n * e.g. `ctrl+k`, `shift--`\n */\nexport function splitKeyCombination (combination: string, isInternal = false): string[] {\n  if (!combination) {\n    if (!isInternal) consoleWarn('Invalid hotkey combination: empty string provided')\n    return []\n  }\n\n  // --- VALIDATION ---\n  const startsWithPlusOrUnderscore = combination.startsWith('+') || combination.startsWith('_')\n\n  const hasInvalidLeadingSeparator = (\n    // Starts with a single '+' or '_' followed by a non-separator character (e.g. '+a', '_a')\n    startsWithPlusOrUnderscore &&\n    !(combination.startsWith('++') || combination.startsWith('__'))\n  )\n\n  const hasInvalidStructure = (\n    // Invalid leading separator patterns\n    (combination.length > 1 && hasInvalidLeadingSeparator) ||\n    // Disallow literal + or _ keys (they require shift)\n    combination.includes('++') || combination.includes('__') ||\n    combination === '+' || combination === '_' ||\n    // Ends with a separator that is not part of a doubled literal\n    (combination.length > 1 && (combination.endsWith('+') || combination.endsWith('_')) && combination.at(-2) !== combination.at(-1)) ||\n    // Stand-alone doubled separators (dangling)\n    combination === '++' || combination === '--' || combination === '__'\n  )\n\n  if (hasInvalidStructure) {\n    if (!isInternal) consoleWarn(`Invalid hotkey combination: \"${combination}\" has invalid structure`)\n    return []\n  }\n\n  const keys: string[] = []\n  let buffer = ''\n\n  const flushBuffer = () => {\n    if (buffer) {\n      keys.push(normalizeKey(buffer))\n      buffer = ''\n    }\n  }\n\n  for (let i = 0; i < combination.length; i++) {\n    const char = combination[i]\n    const nextChar = combination[i + 1]\n\n    if (char === '+' || char === '_' || char === '-') {\n      if (char === nextChar) {\n        flushBuffer()\n        keys.push(char)\n        i++\n      } else if (char === '+' || char === '_') {\n        flushBuffer()\n      } else {\n        buffer += char\n      }\n    } else {\n      buffer += char\n    }\n  }\n  flushBuffer()\n\n  // Within a combination, `-` is only valid as a literal key (e.g., `ctrl+-`).\n  // `-` cannot be part of a longer key name within a combination.\n  const hasInvalidMinus = keys.some(key => key.length > 1 && key.includes('-') && key !== '--')\n  if (hasInvalidMinus) {\n    if (!isInternal) consoleWarn(`Invalid hotkey combination: \"${combination}\" has invalid structure`)\n    return []\n  }\n\n  if (keys.length === 0 && combination) {\n    return [normalizeKey(combination)]\n  }\n\n  return keys\n}\n\n/**\n * Splits a hotkey string into its constituent combination groups.\n *\n * A sequence is a series of combinations that must be pressed in order.\n * e.g. `a-b`, `ctrl+k-p`\n */\nexport function splitKeySequence (str: string): string[] {\n  if (!str) {\n    consoleWarn('Invalid hotkey sequence: empty string provided')\n    return []\n  }\n\n  // A sequence is invalid if it starts or ends with a separator,\n  // unless it is part of a combination (e.g., `shift+-`).\n  const hasInvalidStart = str.startsWith('-') && !['---', '--+'].includes(str)\n  const hasInvalidEnd = str.endsWith('-') && !str.endsWith('+-') && !str.endsWith('_-') && str !== '-' && str !== '---'\n\n  if (hasInvalidStart || hasInvalidEnd) {\n    consoleWarn(`Invalid hotkey sequence: \"${str}\" contains invalid combinations`)\n    return []\n  }\n\n  const result: string[] = []\n  let buffer = ''\n  let i = 0\n\n  while (i < str.length) {\n    const char = str[i]\n\n    if (char === '-') {\n      // Determine if this hyphen is part of the current combination\n      const prevChar = str[i - 1]\n      const prevPrevChar = i > 1 ? str[i - 2] : undefined\n\n      const precededBySinglePlusOrUnderscore = (\n        (prevChar === '+' || prevChar === '_') && prevPrevChar !== '+'\n      )\n\n      if (precededBySinglePlusOrUnderscore) {\n        // Treat as part of the combination (e.g., 'ctrl+-')\n        buffer += char\n        i++\n      } else {\n        // Treat as sequence separator\n        if (buffer) {\n          result.push(buffer)\n          buffer = ''\n        } else {\n          // Empty buffer means we have a literal '-' key\n          result.push('-')\n        }\n        i++\n      }\n    } else {\n      buffer += char\n      i++\n    }\n  }\n\n  // Add final buffer if it exists\n  if (buffer) {\n    result.push(buffer)\n  }\n\n  // Collapse runs of '-' so that every second '-' is removed\n  const collapsed: string[] = []\n  let minusCount = 0\n  for (const part of result) {\n    if (part === '-') {\n      if (minusCount % 2 === 0) collapsed.push('-')\n      minusCount++\n    } else {\n      minusCount = 0\n      collapsed.push(part)\n    }\n  }\n\n  // Validate that each part of the sequence is a valid combination\n  const areAllValid = collapsed.every(s => splitKeyCombination(s, true).length > 0)\n\n  if (!areAllValid) {\n    consoleWarn(`Invalid hotkey sequence: \"${str}\" contains invalid combinations`)\n    return []\n  }\n\n  return collapsed\n}\n"],"mappings":"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","ignoreList":[]}