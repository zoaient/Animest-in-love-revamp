{"version":3,"file":"VMaskInput.js","names":["makeVTextFieldProps","VTextField","forwardRefs","makeMaskProps","useMask","useProxiedModel","computed","onBeforeMount","ref","toRef","genericComponent","propsFactory","useRender","makeVMaskInputProps","VMaskInput","name","props","emits","val","setup","_ref","slots","emit","vTextFieldRef","maskText","updateRange","unmaskText","returnMaskedValue","mask","model","undefined","valueBeforeChange","value","enforcedMaskedValue","newUnmaskedValue","validationValue","textFieldProps","filterProps","_createVNode","_mergeProps","$event"],"sources":["../../../src/labs/VMaskInput/VMaskInput.tsx"],"sourcesContent":["// Components\nimport { makeVTextFieldProps, VTextField } from '@/components/VTextField/VTextField'\n\n// Composables\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { makeMaskProps, useMask } from '@/composables/mask'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, onBeforeMount, ref, toRef } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { VTextFieldSlots } from '@/components/VTextField/VTextField'\n\nexport type VMaskInputSlots = VTextFieldSlots\n\nexport const makeVMaskInputProps = propsFactory({\n  ...makeVTextFieldProps(),\n  ...makeMaskProps(),\n}, 'VMaskInput')\n\nexport const VMaskInput = genericComponent<VMaskInputSlots>()({\n  name: 'VMaskInput',\n\n  props: makeVMaskInputProps(),\n\n  emits: {\n    'update:modelValue': (val: string) => true,\n  },\n\n  setup (props, { slots, emit }) {\n    const vTextFieldRef = ref<VTextField>()\n\n    const { maskText, updateRange, unmaskText } = useMask(props, vTextFieldRef)\n    const returnMaskedValue = computed(() => props.mask && props.returnMaskedValue)\n\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      undefined,\n      // Always display masked value in input when mask is applied\n      val => props.mask ? maskText(unmaskText(val)) : val,\n      val => {\n        if (props.mask) {\n          const valueBeforeChange = unmaskText(model.value)\n          // E.g. mask is #-# and the input value is '2-23'\n          // model-value should be enforced to '2-2'\n          const enforcedMaskedValue = maskText(unmaskText(val))\n          const newUnmaskedValue = unmaskText(enforcedMaskedValue)\n\n          if (newUnmaskedValue === valueBeforeChange) {\n            vTextFieldRef.value!.value = enforcedMaskedValue\n          }\n          val = newUnmaskedValue\n          updateRange()\n          return returnMaskedValue.value ? maskText(val) : val\n        }\n        return val\n      },\n    )\n\n    const validationValue = toRef(() => returnMaskedValue.value ? model.value : unmaskText(model.value))\n\n    onBeforeMount(() => {\n      if (props.returnMaskedValue) {\n        emit('update:modelValue', model.value)\n      }\n    })\n\n    useRender(() => {\n      const textFieldProps = VTextField.filterProps(props)\n\n      return (\n        <VTextField\n          { ...textFieldProps }\n          v-model={ model.value }\n          ref={ vTextFieldRef }\n          validationValue={ validationValue.value }\n        >\n          {{ ...slots }}\n        </VTextField>\n      )\n    })\n\n    return forwardRefs({}, vTextFieldRef)\n  },\n})\n\nexport type VMaskInput = InstanceType<typeof VMaskInput>\n"],"mappings":"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","ignoreList":[]}