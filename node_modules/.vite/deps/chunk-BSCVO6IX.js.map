{
  "version": 3,
  "sources": ["../../vuetify/src/composables/color.ts"],
  "sourcesContent": ["// Utilities\nimport { toValue } from 'vue'\nimport { destructComputed, getForeground, isCssColor, isParsableColor, parseColor } from '@/util'\n\n// Types\nimport type { CSSProperties, MaybeRefOrGetter, Ref } from 'vue'\n\ntype ColorValue = string | false | null | undefined\n\nexport interface TextColorData {\n  textColorClasses: Ref<string[]>\n  textColorStyles: Ref<CSSProperties>\n}\n\nexport interface BackgroundColorData {\n  backgroundColorClasses: Ref<string[]>\n  backgroundColorStyles: Ref<CSSProperties>\n}\n\n// Composables\nexport function useColor (colors: MaybeRefOrGetter<{ background?: ColorValue, text?: ColorValue }>) {\n  return destructComputed(() => {\n    const _colors = toValue(colors)\n    const classes: string[] = []\n    const styles: CSSProperties = {}\n\n    if (_colors.background) {\n      if (isCssColor(_colors.background)) {\n        styles.backgroundColor = _colors.background\n\n        if (!_colors.text && isParsableColor(_colors.background)) {\n          const backgroundColor = parseColor(_colors.background)\n          if (backgroundColor.a == null || backgroundColor.a === 1) {\n            const textColor = getForeground(backgroundColor)\n\n            styles.color = textColor\n            styles.caretColor = textColor\n          }\n        }\n      } else {\n        classes.push(`bg-${_colors.background}`)\n      }\n    }\n\n    if (_colors.text) {\n      if (isCssColor(_colors.text)) {\n        styles.color = _colors.text\n        styles.caretColor = _colors.text\n      } else {\n        classes.push(`text-${_colors.text}`)\n      }\n    }\n\n    return { colorClasses: classes, colorStyles: styles }\n  })\n}\n\nexport function useTextColor (color: MaybeRefOrGetter<ColorValue>): TextColorData {\n  const {\n    colorClasses: textColorClasses,\n    colorStyles: textColorStyles,\n  } = useColor(() => ({\n    text: toValue(color),\n  }))\n\n  return { textColorClasses, textColorStyles }\n}\n\nexport function useBackgroundColor (color: MaybeRefOrGetter<ColorValue>): BackgroundColorData {\n  const {\n    colorClasses: backgroundColorClasses,\n    colorStyles: backgroundColorStyles,\n  } = useColor(() => ({\n    background: toValue(color),\n  }))\n\n  return { backgroundColorClasses, backgroundColorStyles }\n}\n"],
  "mappings": ";;;;;;;;;;;;AAoBO,SAASA,SAAUC,QAA0E;AAClG,SAAOC,iBAAiB,MAAM;AAC5B,UAAMC,UAAUC,QAAQH,MAAM;AAC9B,UAAMI,UAAoB,CAAA;AAC1B,UAAMC,SAAwB,CAAC;AAE/B,QAAIH,QAAQI,YAAY;AACtB,UAAIC,WAAWL,QAAQI,UAAU,GAAG;AAClCD,eAAOG,kBAAkBN,QAAQI;AAEjC,YAAI,CAACJ,QAAQO,QAAQC,gBAAgBR,QAAQI,UAAU,GAAG;AACxD,gBAAME,kBAAkBG,WAAWT,QAAQI,UAAU;AACrD,cAAIE,gBAAgBI,KAAK,QAAQJ,gBAAgBI,MAAM,GAAG;AACxD,kBAAMC,YAAYC,cAAcN,eAAe;AAE/CH,mBAAOU,QAAQF;AACfR,mBAAOW,aAAaH;UACtB;QACF;MACF,OAAO;AACLT,gBAAQa,KAAK,MAAMf,QAAQI,UAAU,EAAE;MACzC;IACF;AAEA,QAAIJ,QAAQO,MAAM;AAChB,UAAIF,WAAWL,QAAQO,IAAI,GAAG;AAC5BJ,eAAOU,QAAQb,QAAQO;AACvBJ,eAAOW,aAAad,QAAQO;MAC9B,OAAO;AACLL,gBAAQa,KAAK,QAAQf,QAAQO,IAAI,EAAE;MACrC;IACF;AAEA,WAAO;MAAES,cAAcd;MAASe,aAAad;IAAO;EACtD,CAAC;AACH;AAEO,SAASe,aAAcL,OAAoD;AAChF,QAAM;IACJG,cAAcG;IACdF,aAAaG;EACf,IAAIvB,SAAS,OAAO;IAClBU,MAAMN,QAAQY,KAAK;EACrB,EAAE;AAEF,SAAO;IAAEM;IAAkBC;EAAgB;AAC7C;AAEO,SAASC,mBAAoBR,OAA0D;AAC5F,QAAM;IACJG,cAAcM;IACdL,aAAaM;EACf,IAAI1B,SAAS,OAAO;IAClBO,YAAYH,QAAQY,KAAK;EAC3B,EAAE;AAEF,SAAO;IAAES;IAAwBC;EAAsB;AACzD;",
  "names": ["useColor", "colors", "destructComputed", "_colors", "toValue", "classes", "styles", "background", "isCssColor", "backgroundColor", "text", "isParsableColor", "parseColor", "a", "textColor", "getForeground", "color", "caretColor", "push", "colorClasses", "colorStyles", "useTextColor", "textColorClasses", "textColorStyles", "useBackgroundColor", "backgroundColorClasses", "backgroundColorStyles"]
}
