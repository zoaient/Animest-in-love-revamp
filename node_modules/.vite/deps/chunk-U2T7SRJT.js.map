{
  "version": 3,
  "sources": ["../../vuetify/src/composables/theme.ts"],
  "sourcesContent": ["// Utilities\nimport {\n  computed,\n  getCurrentScope,\n  inject,\n  onScopeDispose,\n  provide,\n  ref,\n  shallowRef,\n  toRef,\n  watch,\n  watchEffect,\n} from 'vue'\nimport {\n  consoleWarn,\n  createRange,\n  darken,\n  deprecate,\n  getCurrentInstance,\n  getForeground,\n  getLuma,\n  IN_BROWSER,\n  lighten,\n  mergeDeep,\n  parseColor,\n  propsFactory,\n  RGBtoHex,\n  SUPPORTS_MATCH_MEDIA,\n} from '@/util'\n\n// Types\nimport type { VueHeadClient } from '@unhead/vue/client'\nimport type { HeadClient } from '@vueuse/head'\nimport type { App, DeepReadonly, InjectionKey, Ref } from 'vue'\n\ntype DeepPartial<T> = T extends object ? { [P in keyof T]?: DeepPartial<T[P]> } : T\n\nexport type ThemeOptions = false | {\n  cspNonce?: string\n  defaultTheme?: 'light' | 'dark' | 'system' | string & {}\n  variations?: false | VariationsOptions\n  themes?: Record<string, ThemeDefinition>\n  stylesheetId?: string\n  scope?: string\n  unimportant?: boolean\n}\nexport type ThemeDefinition = DeepPartial<InternalThemeDefinition>\n\ninterface InternalThemeOptions {\n  cspNonce?: string\n  isDisabled: boolean\n  defaultTheme: 'light' | 'dark' | 'system' | string & {}\n  prefix: string\n  variations: false | VariationsOptions\n  themes: Record<string, InternalThemeDefinition>\n  stylesheetId: string\n  scope?: string\n  scoped: boolean\n  unimportant: boolean\n  utilities: boolean\n}\n\ninterface VariationsOptions {\n  colors: string[]\n  lighten: number\n  darken: number\n}\n\ninterface InternalThemeDefinition {\n  dark: boolean\n  colors: Colors\n  variables: Record<string, string | number>\n}\n\nexport interface Colors extends BaseColors, OnColors {\n  [key: string]: string\n}\n\ninterface BaseColors {\n  background: string\n  surface: string\n  primary: string\n  secondary: string\n  success: string\n  warning: string\n  error: string\n  info: string\n}\n\ninterface OnColors {\n  'on-background': string\n  'on-surface': string\n  'on-primary': string\n  'on-secondary': string\n  'on-success': string\n  'on-warning': string\n  'on-error': string\n  'on-info': string\n}\n\nexport interface ThemeInstance {\n  change: (themeName: string) => void\n  cycle: (themeArray?: string[]) => void\n  toggle: (themeArray?: [string, string]) => void\n\n  readonly isDisabled: boolean\n  readonly isSystem: Readonly<Ref<boolean>>\n  readonly themes: Ref<Record<string, InternalThemeDefinition>>\n\n  readonly name: Readonly<Ref<string>>\n  readonly current: DeepReadonly<Ref<InternalThemeDefinition>>\n  readonly computedThemes: DeepReadonly<Ref<Record<string, InternalThemeDefinition>>>\n  readonly prefix: string\n\n  readonly themeClasses: Readonly<Ref<string | undefined>>\n  readonly styles: Readonly<Ref<string>>\n\n  readonly global: {\n    readonly name: Ref<string>\n    readonly current: DeepReadonly<Ref<InternalThemeDefinition>>\n  }\n}\n\nexport const ThemeSymbol: InjectionKey<ThemeInstance> = Symbol.for('vuetify:theme')\n\nexport const makeThemeProps = propsFactory({\n  theme: String,\n}, 'theme')\n\nfunction genDefaults () {\n  return {\n    defaultTheme: 'light',\n    prefix: 'v-',\n    variations: { colors: [], lighten: 0, darken: 0 },\n    themes: {\n      light: {\n        dark: false,\n        colors: {\n          background: '#FFFFFF',\n          surface: '#FFFFFF',\n          'surface-bright': '#FFFFFF',\n          'surface-light': '#EEEEEE',\n          'surface-variant': '#424242',\n          'on-surface-variant': '#EEEEEE',\n          primary: '#1867C0',\n          'primary-darken-1': '#1F5592',\n          secondary: '#48A9A6',\n          'secondary-darken-1': '#018786',\n          error: '#B00020',\n          info: '#2196F3',\n          success: '#4CAF50',\n          warning: '#FB8C00',\n        },\n        variables: {\n          'border-color': '#000000',\n          'border-opacity': 0.12,\n          'high-emphasis-opacity': 0.87,\n          'medium-emphasis-opacity': 0.60,\n          'disabled-opacity': 0.38,\n          'idle-opacity': 0.04,\n          'hover-opacity': 0.04,\n          'focus-opacity': 0.12,\n          'selected-opacity': 0.08,\n          'activated-opacity': 0.12,\n          'pressed-opacity': 0.12,\n          'dragged-opacity': 0.08,\n          'theme-kbd': '#EEEEEE',\n          'theme-on-kbd': '#000000',\n          'theme-code': '#F5F5F5',\n          'theme-on-code': '#000000',\n        },\n      },\n      dark: {\n        dark: true,\n        colors: {\n          background: '#121212',\n          surface: '#212121',\n          'surface-bright': '#ccbfd6',\n          'surface-light': '#424242',\n          'surface-variant': '#c8c8c8',\n          'on-surface-variant': '#000000',\n          primary: '#2196F3',\n          'primary-darken-1': '#277CC1',\n          secondary: '#54B6B2',\n          'secondary-darken-1': '#48A9A6',\n          error: '#CF6679',\n          info: '#2196F3',\n          success: '#4CAF50',\n          warning: '#FB8C00',\n        },\n        variables: {\n          'border-color': '#FFFFFF',\n          'border-opacity': 0.12,\n          'high-emphasis-opacity': 1,\n          'medium-emphasis-opacity': 0.70,\n          'disabled-opacity': 0.50,\n          'idle-opacity': 0.10,\n          'hover-opacity': 0.04,\n          'focus-opacity': 0.12,\n          'selected-opacity': 0.08,\n          'activated-opacity': 0.12,\n          'pressed-opacity': 0.16,\n          'dragged-opacity': 0.08,\n          'theme-kbd': '#424242',\n          'theme-on-kbd': '#FFFFFF',\n          'theme-code': '#343434',\n          'theme-on-code': '#CCCCCC',\n        },\n      },\n    },\n    stylesheetId: 'vuetify-theme-stylesheet',\n    scoped: false,\n    unimportant: false,\n    utilities: true,\n  }\n}\n\nfunction parseThemeOptions (options: ThemeOptions = genDefaults()): InternalThemeOptions {\n  const defaults = genDefaults()\n\n  if (!options) return { ...defaults, isDisabled: true } as any\n\n  const themes: Record<string, InternalThemeDefinition> = {}\n  for (const [key, theme] of Object.entries(options.themes ?? {})) {\n    const defaultTheme = theme.dark || key === 'dark'\n      ? defaults.themes?.dark\n      : defaults.themes?.light\n    themes[key] = mergeDeep(defaultTheme, theme) as InternalThemeDefinition\n  }\n\n  return mergeDeep(\n    defaults,\n    { ...options, themes },\n  ) as InternalThemeOptions\n}\n\nfunction createCssClass (lines: string[], selector: string, content: string[], scope?: string) {\n  lines.push(\n    `${getScopedSelector(selector, scope)} {\\n`,\n    ...content.map(line => `  ${line};\\n`),\n    '}\\n',\n  )\n}\n\nfunction genCssVariables (theme: InternalThemeDefinition, prefix: string) {\n  const lightOverlay = theme.dark ? 2 : 1\n  const darkOverlay = theme.dark ? 1 : 2\n\n  const variables: string[] = []\n  for (const [key, value] of Object.entries(theme.colors)) {\n    const rgb = parseColor(value)\n    variables.push(`--${prefix}theme-${key}: ${rgb.r},${rgb.g},${rgb.b}`)\n    if (!key.startsWith('on-')) {\n      variables.push(`--${prefix}theme-${key}-overlay-multiplier: ${getLuma(value) > 0.18 ? lightOverlay : darkOverlay}`)\n    }\n  }\n\n  for (const [key, value] of Object.entries(theme.variables)) {\n    const color = typeof value === 'string' && value.startsWith('#') ? parseColor(value) : undefined\n    const rgb = color ? `${color.r}, ${color.g}, ${color.b}` : undefined\n    variables.push(`--${prefix}${key}: ${rgb ?? value}`)\n  }\n\n  return variables\n}\n\nfunction genVariation (name: string, color: string, variations: VariationsOptions | false) {\n  const object: Record<string, string> = {}\n  if (variations) {\n    for (const variation of (['lighten', 'darken'] as const)) {\n      const fn = variation === 'lighten' ? lighten : darken\n      for (const amount of createRange(variations[variation], 1)) {\n        object[`${name}-${variation}-${amount}`] = RGBtoHex(fn(parseColor(color), amount))\n      }\n    }\n  }\n  return object\n}\n\nfunction genVariations (colors: InternalThemeDefinition['colors'], variations: VariationsOptions | false) {\n  if (!variations) return {}\n\n  let variationColors = {}\n  for (const name of variations.colors) {\n    const color = colors[name]\n\n    if (!color) continue\n\n    variationColors = {\n      ...variationColors,\n      ...genVariation(name, color, variations),\n    }\n  }\n  return variationColors\n}\n\nfunction genOnColors (colors: InternalThemeDefinition['colors']) {\n  const onColors = {} as InternalThemeDefinition['colors']\n\n  for (const color of Object.keys(colors)) {\n    if (color.startsWith('on-') || colors[`on-${color}`]) continue\n\n    const onColor = `on-${color}` as keyof OnColors\n    const colorVal = parseColor(colors[color])\n\n    onColors[onColor] = getForeground(colorVal)\n  }\n\n  return onColors\n}\n\nfunction getScopedSelector (selector: string, scope?: string) {\n  if (!scope) return selector\n\n  const scopeSelector = `:where(${scope})`\n\n  return selector === ':root' ? scopeSelector : `${scopeSelector} ${selector}`\n}\n\nfunction upsertStyles (id: string, cspNonce: string | undefined, styles: string) {\n  const styleEl = getOrCreateStyleElement(id, cspNonce)\n\n  if (!styleEl) return\n\n  styleEl.innerHTML = styles\n}\n\nfunction getOrCreateStyleElement (id: string, cspNonce?: string) {\n  if (!IN_BROWSER) return null\n\n  let style = document.getElementById(id) as HTMLStyleElement | null\n\n  if (!style) {\n    style = document.createElement('style')\n    style.id = id\n    style.type = 'text/css'\n\n    if (cspNonce) style.setAttribute('nonce', cspNonce)\n\n    document.head.appendChild(style)\n  }\n\n  return style\n}\n\n// Composables\nexport function createTheme (options?: ThemeOptions): ThemeInstance & { install: (app: App) => void } {\n  const parsedOptions = parseThemeOptions(options)\n  const _name = shallowRef(parsedOptions.defaultTheme)\n  const themes = ref(parsedOptions.themes)\n  const systemName = shallowRef('light')\n\n  const name = computed({\n    get () {\n      return _name.value === 'system' ? systemName.value : _name.value\n    },\n    set (val: string) {\n      _name.value = val\n    },\n  })\n\n  const computedThemes = computed(() => {\n    const acc: Record<string, InternalThemeDefinition> = {}\n    for (const [name, original] of Object.entries(themes.value)) {\n      const colors = {\n        ...original.colors,\n        ...genVariations(original.colors, parsedOptions.variations),\n      }\n\n      acc[name] = {\n        ...original,\n        colors: {\n          ...colors,\n          ...genOnColors(colors),\n        },\n      }\n    }\n    return acc\n  })\n\n  const current = toRef(() => computedThemes.value[name.value])\n\n  const isSystem = toRef(() => _name.value === 'system')\n\n  const styles = computed(() => {\n    const lines: string[] = []\n    const important = parsedOptions.unimportant ? '' : ' !important'\n    const scoped = parsedOptions.scoped ? parsedOptions.prefix : ''\n\n    if (current.value?.dark) {\n      createCssClass(lines, ':root', ['color-scheme: dark'], parsedOptions.scope)\n    }\n\n    createCssClass(lines, ':root', genCssVariables(current.value, parsedOptions.prefix), parsedOptions.scope)\n\n    for (const [themeName, theme] of Object.entries(computedThemes.value)) {\n      createCssClass(lines, `.${parsedOptions.prefix}theme--${themeName}`, [\n        `color-scheme: ${theme.dark ? 'dark' : 'normal'}`,\n        ...genCssVariables(theme, parsedOptions.prefix),\n      ], parsedOptions.scope)\n    }\n\n    if (parsedOptions.utilities) {\n      const bgLines: string[] = []\n      const fgLines: string[] = []\n\n      const colors = new Set(Object.values(computedThemes.value).flatMap(theme => Object.keys(theme.colors)))\n      for (const key of colors) {\n        if (key.startsWith('on-')) {\n          createCssClass(fgLines, `.${key}`, [`color: rgb(var(--${parsedOptions.prefix}theme-${key}))${important}`], parsedOptions.scope)\n        } else {\n          createCssClass(bgLines, `.${scoped}bg-${key}`, [\n            `--${parsedOptions.prefix}theme-overlay-multiplier: var(--${parsedOptions.prefix}theme-${key}-overlay-multiplier)`,\n            `background-color: rgb(var(--${parsedOptions.prefix}theme-${key}))${important}`,\n            `color: rgb(var(--${parsedOptions.prefix}theme-on-${key}))${important}`,\n          ], parsedOptions.scope)\n          createCssClass(fgLines, `.${scoped}text-${key}`, [`color: rgb(var(--${parsedOptions.prefix}theme-${key}))${important}`], parsedOptions.scope)\n          createCssClass(fgLines, `.${scoped}border-${key}`, [`--${parsedOptions.prefix}border-color: var(--${parsedOptions.prefix}theme-${key})`], parsedOptions.scope)\n        }\n      }\n\n      lines.push(...bgLines, ...fgLines)\n    }\n\n    return lines.map((str, i) => i === 0 ? str : `    ${str}`).join('')\n  })\n\n  const themeClasses = toRef(() => parsedOptions.isDisabled ? undefined : `${parsedOptions.prefix}theme--${name.value}`)\n  const themeNames = toRef(() => Object.keys(computedThemes.value))\n\n  if (SUPPORTS_MATCH_MEDIA) {\n    const media = window.matchMedia('(prefers-color-scheme: dark)')\n\n    function updateSystemName () {\n      systemName.value = media.matches ? 'dark' : 'light'\n    }\n\n    updateSystemName()\n\n    media.addEventListener('change', updateSystemName, { passive: true })\n\n    if (getCurrentScope()) {\n      onScopeDispose(() => {\n        media.removeEventListener('change', updateSystemName)\n      })\n    }\n  }\n\n  function install (app: App) {\n    if (parsedOptions.isDisabled) return\n\n    const head = app._context.provides.usehead as HeadClient & VueHeadClient<any> | undefined\n    if (head) {\n      function getHead () {\n        return {\n          style: [{\n            textContent: styles.value,\n            id: parsedOptions.stylesheetId,\n            nonce: parsedOptions.cspNonce || false as never,\n          }],\n        }\n      }\n\n      if (head.push) {\n        const entry = head.push(getHead)\n        if (IN_BROWSER) {\n          watch(styles, () => { entry.patch(getHead) })\n        }\n      } else {\n        if (IN_BROWSER) {\n          head.addHeadObjs(toRef(getHead))\n          watchEffect(() => head.updateDOM())\n        } else {\n          head.addHeadObjs(getHead())\n        }\n      }\n    } else {\n      if (IN_BROWSER) {\n        watch(styles, updateStyles, { immediate: true })\n      } else {\n        updateStyles()\n      }\n\n      function updateStyles () {\n        upsertStyles(parsedOptions.stylesheetId, parsedOptions.cspNonce, styles.value)\n      }\n    }\n  }\n\n  function change (themeName: string) {\n    if (themeName !== 'system' && !themeNames.value.includes(themeName)) {\n      consoleWarn(`Theme \"${themeName}\" not found on the Vuetify theme instance`)\n      return\n    }\n\n    name.value = themeName\n  }\n\n  function cycle (themeArray: string[] = themeNames.value) {\n    const currentIndex = themeArray.indexOf(name.value)\n    const nextIndex = currentIndex === -1 ? 0 : (currentIndex + 1) % themeArray.length\n\n    change(themeArray[nextIndex])\n  }\n\n  function toggle (themeArray: [string, string] = ['light', 'dark']) {\n    cycle(themeArray)\n  }\n\n  const globalName = new Proxy(name, {\n    get (target, prop) {\n      return Reflect.get(target, prop)\n    },\n    set (target, prop, val) {\n      if (prop === 'value') {\n        deprecate(`theme.global.name.value = ${val}`, `theme.change('${val}')`)\n      }\n      return Reflect.set(target, prop, val)\n    },\n  })\n\n  return {\n    install,\n    change,\n    cycle,\n    toggle,\n    isDisabled: parsedOptions.isDisabled,\n    isSystem,\n    name,\n    themes,\n    current,\n    computedThemes,\n    prefix: parsedOptions.prefix,\n    themeClasses,\n    styles,\n    global: {\n      name: globalName,\n      current,\n    },\n  }\n}\n\nexport function provideTheme (props: { theme?: string }) {\n  getCurrentInstance('provideTheme')\n\n  const theme = inject(ThemeSymbol, null)\n\n  if (!theme) throw new Error('Could not find Vuetify theme injection')\n\n  const name = toRef(() => props.theme ?? theme.name.value)\n  const current = toRef(() => theme.themes.value[name.value])\n\n  const themeClasses = toRef(() => theme.isDisabled ? undefined : `${theme.prefix}theme--${name.value}`)\n\n  const newTheme: ThemeInstance = {\n    ...theme,\n    name,\n    current,\n    themeClasses,\n  }\n\n  provide(ThemeSymbol, newTheme)\n\n  return newTheme\n}\n\nexport function useTheme () {\n  getCurrentInstance('useTheme')\n\n  const theme = inject(ThemeSymbol, null)\n\n  if (!theme) throw new Error('Could not find Vuetify theme injection')\n\n  return theme\n}\n"],
  "mappings": "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",
  "names": ["ThemeSymbol", "Symbol", "for", "makeThemeProps", "propsFactory", "theme", "String", "genDefaults", "defaultTheme", "prefix", "variations", "colors", "lighten", "darken", "themes", "light", "dark", "background", "surface", "primary", "secondary", "error", "info", "success", "warning", "variables", "stylesheetId", "scoped", "unimportant", "utilities", "parseThemeOptions", "options", "arguments", "length", "undefined", "defaults", "isDisabled", "key", "Object", "entries", "mergeDeep", "createCssClass", "lines", "selector", "content", "scope", "push", "getScopedSelector", "map", "line", "genCssVariables", "lightOverlay", "darkOverlay", "value", "rgb", "parseColor", "r", "g", "b", "startsWith", "getLuma", "color", "genVariation", "name", "object", "variation", "fn", "amount", "createRange", "RGBtoHex", "genVariations", "variationColors", "genOnColors", "onColors", "keys", "onColor", "colorVal", "getForeground", "scopeSelector", "upsertStyles", "id", "cspNonce", "styles", "styleEl", "getOrCreateStyleElement", "innerHTML", "IN_BROWSER", "style", "document", "getElementById", "createElement", "type", "setAttribute", "head", "appendChild", "createTheme", "parsedOptions", "_name", "shallowRef", "ref", "systemName", "computed", "get", "set", "val", "computedThemes", "acc", "original", "current", "toRef", "isSystem", "important", "themeName", "bgLines", "fgLines", "Set", "values", "flatMap", "str", "i", "join", "themeClasses", "themeNames", "SUPPORTS_MATCH_MEDIA", "updateSystemName", "media", "matches", "window", "matchMedia", "addEventListener", "passive", "getCurrentScope", "onScopeDispose", "removeEventListener", "install", "app", "_context", "provides", "usehead", "getHead", "textContent", "nonce", "entry", "watch", "patch", "addHeadObjs", "watchEffect", "updateDOM", "updateStyles", "immediate", "change", "includes", "consoleWarn", "cycle", "themeArray", "currentIndex", "indexOf", "nextIndex", "toggle", "globalName", "Proxy", "target", "prop", "Reflect", "deprecate", "global", "provideTheme", "props", "getCurrentInstance", "inject", "Error", "newTheme", "provide", "useTheme"]
}
